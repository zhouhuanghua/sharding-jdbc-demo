sharding:
  jdbc:
    datasource:
      names: ds0,ds1,slave0,slave1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://thunderclap.cn:3306/ds0
        username: zhh
        password: 123456
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://thunderclap.cn:3306/ds1
        username: zhh
        password: 123456
      slave0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://thunderclap.cn:3306/slave0
        username: zhh
        password: 123456
      slave1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://thunderclap.cn:3306/slave1
        username: zhh
        password: 123456

    config:
      sharding:
        # 数据分片
        default-database-strategy:
          inline:
            sharding-column: user_id
            algorithm-expression: ds$->{user_id % 2}
        tables:
          t_user:
            actual-data-nodes: ds$->{0..1}.t_user$->{0..3}
            key-generator-column-name: user_id
            # 内置：SNOWFLAKE、UUID
            key-generator-class-name: cn.zhh.keygen.AutoIncrementKeyGenerator
            table-strategy:
              inline:
                sharding-column: user_id
                algorithm-expression: t_user$->{user_id % (2 * 2)}
        # 读写分离
        master-slave-rules:
          ds0:
            master-data-source-name: ds0
            slave-data-source-names: slave0
          ds1:
            master-data-source-name: ds1
            slave-data-source-names: slave1